document.addEventListener('DOMContentLoaded', () => {
    const video = document.getElementById('webcam');
    const resultImg = document.getElementById('result');
    const startButton = document.getElementById('start-camera');
    const statusText = document.getElementById('status-text');
    const instructionText = document.getElementById('instruction-text');
    const instructionBox = document.getElementById('instruction-box');
    const grayscaleToggle = document.getElementById('toggle-grayscale');
    
    // ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò Ï†ïÎ≥¥ ÏöîÏÜåÎì§
    const navState = document.getElementById('nav-state');
    const navDirection = document.getElementById('nav-direction');
    const navButton = document.getElementById('nav-button');
    const navObstacles = document.getElementById('nav-obstacles');
    
    // Í≤ΩÍ≥† Î∞ïÏä§ ÏöîÏÜåÎì§
    const warningBox = document.getElementById('warning-box');
    const warningList = document.getElementById('warning-list');
    
    // ÎîîÎ≤ÑÍπÖ Ï†ïÎ≥¥ ÏöîÏÜåÎì§
    const debugClasses = document.getElementById('debug-classes');
    const debugBoxes = document.getElementById('debug-boxes');
    const debugMode = document.getElementById('debug-mode');
    const debugStatus = document.getElementById('debug-status');
    
    // Ï∫îÎ≤ÑÏä§ Ïò§Î≤ÑÎ†àÏù¥ ÏöîÏÜåÎì§
    let overlayCanvas = null;
    let overlayContext = null;
    
    let isStreaming = false;
    let socket = null;
    let lastRequestTime = 0;
    let pendingRequest = false;
    let captureTimer = null;
    let grayscaleMode = false;
    
    // Î∞îÏö¥Îî© Î∞ïÏä§ÏôÄ ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû•
    let currentBoxes = [];
    let currentBoxData = []; // ÌÅ¥ÎûòÏä§ Ï†ïÎ≥¥Í∞Ä Ìè¨Ìï®Îêú Î∞ïÏä§ Îç∞Ïù¥ÌÑ∞
    let currentNavigation = null;
    let currentArrows = null; // ÌôîÏÇ¥Ìëú Ï†ïÎ≥¥ Ï†ÄÏû•
    let renderTimer = null;
    
    function speak(text) {
        speechSynthesis.resume(); // ÏùåÏÑ± ÏòàÏó¥
    const testUtterance = new SpeechSynthesisUtterance(text);
    testUtterance.lang = 'ko-KR';
    speechSynthesis.speak(testUtterance);

    }
    function cancel_the_speak() {
        speechSynthesis.cancel();
    }

    // Socket.IO Ïó∞Í≤∞ ÏÑ§Ï†ï
    function setupSocket() {
        const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
        const host = window.location.host;
        socket = io(`${protocol}//${host}`, {
            transports: ['websocket'],
            upgrade: false,
            reconnectionAttempts: 5,
            timeout: 10000
        });
        
        socket.on('connect', () => {
            
            statusText.textContent = 'ÏÑúÎ≤ÑÏóê Ïó∞Í≤∞ÎêòÏóàÏäµÎãàÎã§.';
            statusText.style.color = 'green';
            debugStatus.textContent = 'Ïó∞Í≤∞Îê®';
        });
        
        socket.on('disconnect', () => {
            statusText.textContent = 'ÏÑúÎ≤Ñ Ïó∞Í≤∞Ïù¥ ÎÅäÍ≤ºÏäµÎãàÎã§.';
            statusText.style.color = 'red';
            debugStatus.textContent = 'Ïó∞Í≤∞ ÎÅäÍπÄ';
            updateInstruction('ÏÑúÎ≤Ñ Ïó∞Í≤∞Ïù¥ ÎÅäÍ≤ºÏäµÎãàÎã§', 'danger');
        });
        
        socket.on('result', (data) => {
            // Ïù¥ÎØ∏ÏßÄÎäî Îçî Ïù¥ÏÉÅ ÌëúÏãúÌïòÏßÄ ÏïäÏùå (Ïã§ÏãúÍ∞Ñ Ïπ¥Î©îÎùº ÏÇ¨Ïö©)
            pendingRequest = false;
            debugStatus.textContent = 'Ï≤òÎ¶¨ ÏôÑÎ£å';
            
            console.log('üîç ÏÑúÎ≤Ñ ÏùëÎãµ Îç∞Ïù¥ÌÑ∞:', data);
            
            // ÌùëÎ∞± Î™®Îìú ÏÉÅÌÉú ÎèôÍ∏∞Ìôî
            if (data.hasOwnProperty('grayscale_mode')) {
                updateGrayscaleMode(data.grayscale_mode);
            }
            
            // Î∞îÏö¥Îî© Î∞ïÏä§ Îç∞Ïù¥ÌÑ∞ ÏóÖÎç∞Ïù¥Ìä∏
            if (data.box_coords) {
                currentBoxes = data.box_coords;
            }
            if (data.boxes) {
                currentBoxData = data.boxes; // ÌÅ¥ÎûòÏä§ Ï†ïÎ≥¥Í∞Ä Ìè¨Ìï®Îêú Ï†ÑÏ≤¥ Î∞ïÏä§ Îç∞Ïù¥ÌÑ∞
                currentBoxes = data.boxes.map(box => box.box); // Ï¢åÌëúÎßå Ï∂îÏ∂ú (Ìò∏ÌôòÏÑ± Ïú†ÏßÄ)
            }
            
            // ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò Ï†ïÎ≥¥ Ï†ÄÏû• Î∞è ÏóÖÎç∞Ïù¥Ìä∏
            if (data.navigation) {
                currentNavigation = data.navigation;
            }
            
            // ÌôîÏÇ¥Ìëú Ï†ïÎ≥¥ Ï†ÄÏû•
            if (data.arrows) {
                currentArrows = data.arrows;
                console.log('ÌôîÏÇ¥Ìëú Ï†ïÎ≥¥ ÏóÖÎç∞Ïù¥Ìä∏:', currentArrows);
            }
            
            // ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò Ï†ïÎ≥¥ ÏóÖÎç∞Ïù¥Ìä∏
            updateNavigationInfo(data);
            
            // ÎîîÎ≤ÑÍπÖ Ï†ïÎ≥¥ ÏóÖÎç∞Ïù¥Ìä∏
            updateDebugInfo(data);
            
            // ÏïàÎÇ¥ Î©îÏãúÏßÄ ÏóÖÎç∞Ïù¥Ìä∏
            updateInstructionByNavigationData(data);
            
            const now = Date.now();
            const latency = now - lastRequestTime;
            console.log(`ÌîÑÎ†àÏûÑ Ï≤òÎ¶¨ ÏßÄÏó∞ÏãúÍ∞Ñ: ${latency}ms`);
        });
    }
    
    // Ï∫îÎ≤ÑÏä§ Ïò§Î≤ÑÎ†àÏù¥ ÏÉùÏÑ± Ìï®Ïàò
    function createOverlayCanvas() {
        if (overlayCanvas) {
            overlayCanvas.remove();
        }
        
        overlayCanvas = document.createElement('canvas');
        overlayCanvas.style.position = 'absolute';
        overlayCanvas.style.top = '0';
        overlayCanvas.style.left = '0';
        overlayCanvas.style.pointerEvents = 'none';
        overlayCanvas.style.zIndex = '10';
        overlayCanvas.style.borderRadius = '10px';
        
        // Ïπ¥Î©îÎùº Ïª®ÌÖåÏù¥ÎÑàÏóê Ï∫îÎ≤ÑÏä§ Ï∂îÍ∞Ä
        const cameraContainer = document.querySelector('.camera-container');
        if (cameraContainer) {
            cameraContainer.style.position = 'relative';
            cameraContainer.appendChild(overlayCanvas);
        } else {
            // Î∞±ÏóÖ: ÎπÑÎîîÏò§ Î∂ÄÎ™®Ïóê Ï∂îÍ∞Ä
            video.parentNode.style.position = 'relative';
            video.parentNode.appendChild(overlayCanvas);
        }
        
        overlayContext = overlayCanvas.getContext('2d');
        
        // Ï∫îÎ≤ÑÏä§ ÌÅ¨Í∏∞Î•º ÎπÑÎîîÏò§Ïóê ÎßûÏ∂§
        resizeOverlayCanvas();
    }
    
    // Ïò§Î≤ÑÎ†àÏù¥ Ï∫îÎ≤ÑÏä§ ÌÅ¨Í∏∞ Ï°∞Ï†ï
    function resizeOverlayCanvas() {
        if (!overlayCanvas || !video) return;
        
        // ÎπÑÎîîÏò§Í∞Ä Î°úÎìúÎê† ÎïåÍπåÏßÄ ÎåÄÍ∏∞
        if (video.videoWidth === 0 || video.videoHeight === 0) {
            setTimeout(resizeOverlayCanvas, 100);
            return;
        }
        
        const rect = video.getBoundingClientRect();
        overlayCanvas.width = video.videoWidth;
        overlayCanvas.height = video.videoHeight;
        overlayCanvas.style.width = rect.width + 'px';
        overlayCanvas.style.height = rect.height + 'px';
        
        console.log(`Ï∫îÎ≤ÑÏä§ ÌÅ¨Í∏∞ Ï°∞Ï†ï: ${overlayCanvas.width}x${overlayCanvas.height} -> ${rect.width}x${rect.height}`);
    }
    
    // Î∞îÏö¥Îî© Î∞ïÏä§ÏôÄ ÌôîÏÇ¥Ìëú Î†åÎçîÎßÅ
    function renderOverlay() {
        if (!overlayContext || !overlayCanvas) return;
        
        // Ï∫îÎ≤ÑÏä§ ÏßÄÏö∞Í∏∞
        overlayContext.clearRect(0, 0, overlayCanvas.width, overlayCanvas.height);
        
        // Î∞îÏö¥Îî© Î∞ïÏä§ Í∑∏Î¶¨Í∏∞
        if (currentBoxes && currentBoxes.length > 0) {
            drawBoundingBoxes();
        }
        
        // ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò ÌôîÏÇ¥Ìëú Í∑∏Î¶¨Í∏∞
        if (currentArrows && currentArrows.arrows && currentArrows.arrows.length > 0) {
            drawNavigationArrows();
        }
        
        // ÎîîÎ≤ÑÍπÖ: Ï∫îÎ≤ÑÏä§Ïóê ÌÖåÏä§Ìä∏ Ï†ê Í∑∏Î¶¨Í∏∞
        overlayContext.fillStyle = '#FF0000';
        overlayContext.fillRect(10, 10, 5, 5);
    }
    
    // Î∞îÏö¥Îî© Î∞ïÏä§ Í∑∏Î¶¨Í∏∞
    function drawBoundingBoxes() {
        if (!video.videoWidth || !video.videoHeight) return;
        
        const scaleX = overlayCanvas.width / video.videoWidth;
        const scaleY = overlayCanvas.height / video.videoHeight;
        
        console.log(`Î∞îÏö¥Îî© Î∞ïÏä§ Í∑∏Î¶¨Í∏∞: ${currentBoxes.length}Í∞ú, Ïä§ÏºÄÏùº: ${scaleX.toFixed(2)}x${scaleY.toFixed(2)}`);
        
        // currentBoxDataÍ∞Ä ÏûàÏúºÎ©¥ ÌÅ¥ÎûòÏä§ Ï†ïÎ≥¥ÏôÄ Ìï®Íªò Í∑∏Î¶¨Í∏∞
        if (currentBoxData && currentBoxData.length > 0) {
            currentBoxData.forEach((boxInfo, index) => {
                if (boxInfo && boxInfo.box && boxInfo.box.length >= 4) {
                    const [x1, y1, x2, y2] = boxInfo.box;
                    
                    // Ï¢åÌëú Ïä§ÏºÄÏùºÎßÅ
                    const scaledX1 = x1 * scaleX;
                    const scaledY1 = y1 * scaleY;
                    const scaledX2 = x2 * scaleX;
                    const scaledY2 = y2 * scaleY;
                    
                    // Î™®Îç∏Î≥Ñ ÏÉâÏÉÅ Í≤∞Ï†ï
                    overlayContext.strokeStyle = getModelColor(boxInfo.model);
                    overlayContext.lineWidth = 3;
                    overlayContext.strokeRect(scaledX1, scaledY1, scaledX2 - scaledX1, scaledY2 - scaledY1);
                    
                    // ÌÅ¥ÎûòÏä§ Ïù¥Î¶ÑÍ≥º Ïã†Î¢∞ÎèÑ ÌëúÏãú
                    const className = getDisplayName(boxInfo.class);
                    const confidence = boxInfo.confidence ? (boxInfo.confidence * 100).toFixed(1) : '';
                    const label = confidence ? `${className} (${confidence}%)` : className;
                    
                    // ÎùºÎ≤® Î∞∞Í≤Ω Í∑∏Î¶¨Í∏∞
                    overlayContext.fillStyle = getModelColor(boxInfo.model);
                    overlayContext.font = 'bold 14px Arial';
                    const textMetrics = overlayContext.measureText(label);
                    const textWidth = textMetrics.width + 8;
                    const textHeight = 20;
                    
                    overlayContext.fillRect(scaledX1, scaledY1 - textHeight, textWidth, textHeight);
                    
                    // ÎùºÎ≤® ÌÖçÏä§Ìä∏ Í∑∏Î¶¨Í∏∞ (Î™®Îç∏Î≥Ñ Ï†ÅÏ†àÌïú ÏÉâÏÉÅ ÏÇ¨Ïö©)
                    overlayContext.fillStyle = getTextColor(boxInfo.model);
                    overlayContext.fillText(label, scaledX1 + 4, scaledY1 - 6);
                    
                    console.log(`Î∞ïÏä§ ${index}: ${className} [${x1}, ${y1}, ${x2}, ${y2}] -> [${scaledX1.toFixed(1)}, ${scaledY1.toFixed(1)}, ${scaledX2.toFixed(1)}, ${scaledY2.toFixed(1)}]`);
                }
            });
        } else {
            // Î∞±ÏóÖ: Ï¢åÌëúÎßå ÏûàÎäî Í≤ΩÏö∞
            currentBoxes.forEach((box, index) => {
                if (box && box.length >= 4) {
                    const [x1, y1, x2, y2] = box;
                    
                    // Ï¢åÌëú Ïä§ÏºÄÏùºÎßÅ
                    const scaledX1 = x1 * scaleX;
                    const scaledY1 = y1 * scaleY;
                    const scaledX2 = x2 * scaleX;
                    const scaledY2 = y2 * scaleY;
                    
                    // Î∞ïÏä§ ÏÉâÏÉÅ Í≤∞Ï†ï (Î™®Îç∏Î≥ÑÎ°ú Îã§Î•∏ ÏÉâÏÉÅ)
                    overlayContext.strokeStyle = getBoundingBoxColor(index);
                    overlayContext.lineWidth = 3;
                    overlayContext.strokeRect(scaledX1, scaledY1, scaledX2 - scaledX1, scaledY2 - scaledY1);
                    
                    // ÎùºÎ≤® ÌëúÏãú
                    const boxColor = getBoundingBoxColor(index);
                    const label = `Object ${index + 1}`;
                    
                    // ÎùºÎ≤® Î∞∞Í≤Ω Í∑∏Î¶¨Í∏∞
                    overlayContext.fillStyle = boxColor;
                    overlayContext.font = 'bold 14px Arial';
                    const textMetrics = overlayContext.measureText(label);
                    const textWidth = textMetrics.width + 8;
                    const textHeight = 20;
                    
                    overlayContext.fillRect(scaledX1, scaledY1 - textHeight, textWidth, textHeight);
                    
                    // ÎùºÎ≤® ÌÖçÏä§Ìä∏ Í∑∏Î¶¨Í∏∞ (Î∞∞Í≤ΩÏóê Îî∞Îùº Ï†ÅÏ†àÌïú ÏÉâÏÉÅ ÏÑ†ÌÉù)
                    overlayContext.fillStyle = (index % 2 === 0) ? '#FFFFFF' : '#000000';
                    overlayContext.fillText(label, scaledX1 + 4, scaledY1 - 6);
                }
            });
        }
    }
    
    // Î™®Îç∏Î≥Ñ ÏÉâÏÉÅ Í≤∞Ï†ï
    function getModelColor(model) {
        const modelColors = {
            'block': '#FFD700',    // Í≥®Îìú (Î∏îÎ°ù - Go_Forward, Stop)
            'scooter': '#FF1493',  // Îî•ÌïëÌÅ¨ (Ïä§Ïø†ÌÑ∞)
            'button': '#00FF7F'    // Ïä§ÌîÑÎßÅÍ∑∏Î¶∞ (ÏùåÌñ• Ïã†Ìò∏Í∏∞)
        };
        return modelColors[model] || '#FFFFFF';
    }
    
    // Î™®Îç∏Î≥Ñ ÌÖçÏä§Ìä∏ ÏÉâÏÉÅ Í≤∞Ï†ï
    function getTextColor(model) {
        const textColors = {
            'block': '#000000',    // Í≤ÄÏùÄÏÉâ (ÎÖ∏ÎûÄ Î∞∞Í≤ΩÏóê)
            'scooter': '#FFFFFF',  // Ìù∞ÏÉâ (Îî•ÌïëÌÅ¨ Î∞∞Í≤ΩÏóê)
            'button': '#000000'    // Í≤ÄÏùÄÏÉâ (Ïä§ÌîÑÎßÅÍ∑∏Î¶∞ Î∞∞Í≤ΩÏóê)
        };
        return textColors[model] || '#000000';
    }
    
    // ÌÅ¥ÎûòÏä§ Ïù¥Î¶ÑÏùÑ ÏÇ¨Ïö©Ïûê ÏπúÌôîÏ†ÅÏúºÎ°ú Î≥ÄÌôò
    function getDisplayName(className) {
        const nameMap = {
            'Go_Forward': 'ÏßÅÏßÑ',
            'Stop': 'Ï†ïÏßÄ',
            'Scooter': 'Ïä§Ïø†ÌÑ∞',
            'Sound_Button': 'ÏùåÌñ•Ïã†Ìò∏Í∏∞'
        };
        return nameMap[className] || className;
    }
    
    // Î∞îÏö¥Îî© Î∞ïÏä§ ÏÉâÏÉÅ Í≤∞Ï†ï (Î∞±ÏóÖÏö©)
    function getBoundingBoxColor(index) {
        const colors = [
            '#FF1493', // Îî•ÌïëÌÅ¨ (Ïä§Ïø†ÌÑ∞)
            '#00FF7F', // Ïä§ÌîÑÎßÅÍ∑∏Î¶∞ (ÏùåÌñ• Ïã†Ìò∏Í∏∞)
            '#FFD700', // Í≥®Îìú (Î∏îÎ°ù)
            '#FF8000', // Îã§ÌÅ¨Ïò§Î†åÏßÄ
            '#8A2BE2'  // Î∏îÎ£®Î∞îÏù¥Ïò¨Î†õ
        ];
        return colors[index % colors.length];
    }
    
    // ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò ÌôîÏÇ¥Ìëú Í∑∏Î¶¨Í∏∞
    function drawNavigationArrows() {
        if (!currentArrows || !currentArrows.arrows) return;
        
        const scaleX = overlayCanvas.width / video.videoWidth;
        const scaleY = overlayCanvas.height / video.videoHeight;
        
        // ÏÉÅÌÉú ÌÖçÏä§Ìä∏ ÌëúÏãú
        if (currentArrows.state_text) {
            const stateText = `State: ${currentArrows.state_text}`;
            overlayContext.font = 'bold 20px Arial';
            
            // ÌÖçÏä§Ìä∏ Î∞∞Í≤Ω Í∑∏Î¶¨Í∏∞ (Í∞ÄÎèÖÏÑ±ÏùÑ ÏúÑÌï¥)
            const textMetrics = overlayContext.measureText(stateText);
            const textWidth = textMetrics.width + 16;
            const textHeight = 28;
            
            overlayContext.fillStyle = 'rgba(0, 0, 0, 0.7)'; // Î∞òÌà¨Î™Ö Í≤ÄÏùÄ Î∞∞Í≤Ω
            overlayContext.fillRect(16, 16, textWidth, textHeight);
            
            // ÌÖçÏä§Ìä∏ Ïô∏Í≥ΩÏÑ†
            overlayContext.strokeStyle = '#000000';
            overlayContext.lineWidth = 3;
            overlayContext.strokeText(stateText, 24, 36);
            
            // ÌÖçÏä§Ìä∏ Í∑∏Î¶¨Í∏∞
            overlayContext.fillStyle = '#FFFFFF';
            overlayContext.fillText(stateText, 24, 36);
        }
        
        // ÌôîÏÇ¥Ìëú Í∑∏Î¶¨Í∏∞
        currentArrows.arrows.forEach(arrow => {
            if (arrow.start && arrow.end && arrow.start.length >= 2 && arrow.end.length >= 2) {
                // Ï¢åÌëú Ïä§ÏºÄÏùºÎßÅ
                const startX = arrow.start[0] * scaleX;
                const startY = arrow.start[1] * scaleY;
                const endX = arrow.end[0] * scaleX;
                const endY = arrow.end[1] * scaleY;
                
                // ÌôîÏÇ¥Ìëú ÏÉâÏÉÅ ÏÑ§Ï†ï
                overlayContext.strokeStyle = arrow.color || '#FFFF00';
                overlayContext.fillStyle = arrow.color || '#FFFF00';
                overlayContext.lineWidth = 4;
                
                // ÌôîÏÇ¥Ìëú Í∑∏Î¶¨Í∏∞
                drawArrow(startX, startY, endX, endY);
            }
        });
    }
    
    // ÍµêÏ∞®Î°ú ÌôîÏÇ¥Ìëú Í∑∏Î¶¨Í∏∞
    function drawIntersectionArrows(centerX, centerY, arrowLength) {
        // Ïó¨Îü¨ Î∞©Ìñ•ÏúºÎ°ú ÌôîÏÇ¥Ìëú Í∑∏Î¶¨Í∏∞ (ÏòàÏãú)
        const directions = [
            { angle: -Math.PI/2, label: 'Forward' },  // ÏúÑÏ™Ω
            { angle: 0, label: 'Right' },             // Ïò§Î•∏Ï™Ω
            { angle: Math.PI, label: 'Left' }         // ÏôºÏ™Ω
        ];
        
        directions.forEach(dir => {
            const endX = centerX + Math.cos(dir.angle) * arrowLength;
            const endY = centerY + Math.sin(dir.angle) * arrowLength;
            drawArrow(centerX, centerY, endX, endY);
        });
    }
    
    // ÏßÅÏßÑ ÌôîÏÇ¥Ìëú Í∑∏Î¶¨Í∏∞
    function drawStraightArrow(centerX, centerY, arrowLength) {
        const startY = centerY + arrowLength / 2;
        const endY = centerY - arrowLength / 2;
        drawArrow(centerX, startY, centerX, endY);
    }
    
    // ÌôîÏÇ¥Ìëú Í∑∏Î¶¨Í∏∞ Ìó¨Ìçº Ìï®Ïàò
    function drawArrow(fromX, fromY, toX, toY) {
        const angle = Math.atan2(toY - fromY, toX - fromX);
        const arrowHeadLength = 15;
        
        // ÌôîÏÇ¥Ìëú ÏÑ†
        overlayContext.beginPath();
        overlayContext.moveTo(fromX, fromY);
        overlayContext.lineTo(toX, toY);
        overlayContext.stroke();
        
        // ÌôîÏÇ¥Ìëú Î®∏Î¶¨
        overlayContext.beginPath();
        overlayContext.moveTo(toX, toY);
        overlayContext.lineTo(
            toX - arrowHeadLength * Math.cos(angle - Math.PI / 6),
            toY - arrowHeadLength * Math.sin(angle - Math.PI / 6)
        );
        overlayContext.moveTo(toX, toY);
        overlayContext.lineTo(
            toX - arrowHeadLength * Math.cos(angle + Math.PI / 6),
            toY - arrowHeadLength * Math.sin(angle + Math.PI / 6)
        );
        overlayContext.stroke();
    }
    
    // Ïó∞ÏÜç Î†åÎçîÎßÅ ÏãúÏûë
    function startRendering() {
        if (renderTimer) {
            clearInterval(renderTimer);
        }
        
        renderTimer = setInterval(() => {
            if (isStreaming && overlayCanvas) {
                renderOverlay();
            }
        }, 50); // 20 FPSÎ°ú Ïò§Î≤ÑÎ†àÏù¥ Î†åÎçîÎßÅ
    }
    
    // Ïó∞ÏÜç Î†åÎçîÎßÅ Ï§ëÏßÄ
    function stopRendering() {
        if (renderTimer) {
            clearInterval(renderTimer);
            renderTimer = null;
        }
    }
    function updateGrayscaleMode(isGrayscale) {
        grayscaleMode = isGrayscale;
        grayscaleToggle.textContent = grayscaleMode ? 'Ïª¨Îü¨ Î™®Îìú' : 'ÌùëÎ∞± Î™®Îìú';
        grayscaleToggle.classList.toggle('active', grayscaleMode);
        debugMode.textContent = grayscaleMode ? 'ÌùëÎ∞±' : 'Ïª¨Îü¨';
        console.log(`ÌùëÎ∞± Î™®Îìú ÏÉÅÌÉú Î≥ÄÍ≤Ω: ${grayscaleMode ? 'ÌôúÏÑ±ÌôîÎê®' : 'ÎπÑÌôúÏÑ±ÌôîÎê®'}`);
    }
    
    // ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò Ï†ïÎ≥¥ ÏóÖÎç∞Ïù¥Ìä∏
    function updateNavigationInfo(data) {
        if (!data.navigation) return;
        
        const nav = data.navigation;
        
        // ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
        navState.textContent = getStateText(nav.state);
        navState.style.color = getStateColor(nav.state);
        
        // Î∞©Ìñ• ÏóÖÎç∞Ïù¥Ìä∏
        navDirection.textContent = getDirectionText(nav.direction);
        navDirection.style.color = getDirectionColor(nav.direction);
        
        // ÏùåÌñ• Ïã†Ìò∏Í∏∞ Ï†ïÎ≥¥
        navButton.textContent = nav.signals.sound_button ? 'Í∞êÏßÄÎê®' : 'ÏóÜÏùå';
        navButton.style.color = nav.signals.sound_button ? '#4caf50' : '#666';
        
        // Ïû•Ïï†Î¨º Ï†ïÎ≥¥
        if (nav.obstacles.length > 0) {
            navObstacles.textContent = nav.obstacles.join(', ');
            navObstacles.style.color = '#f44336';
        } else {
            navObstacles.textContent = 'ÏóÜÏùå';
            navObstacles.style.color = '#666';
        }
        
        // Í≤ΩÍ≥† Î©îÏãúÏßÄ ÏóÖÎç∞Ïù¥Ìä∏
        updateWarnings(nav.warnings);
    }
    
    // Í≤ΩÍ≥† Î©îÏãúÏßÄ ÏóÖÎç∞Ïù¥Ìä∏
    function updateWarnings(warnings) {
        if (warnings && warnings.length > 0) {
            warningList.innerHTML = '';
            warnings.forEach(warning => {
                const li = document.createElement('li');
                li.textContent = warning;
                warningList.appendChild(li);
            });
            warningBox.classList.remove('hidden');
        } else {
            warningBox.classList.add('hidden');
        }
    }
    
    // ÎîîÎ≤ÑÍπÖ Ï†ïÎ≥¥ ÏóÖÎç∞Ïù¥Ìä∏
    function updateDebugInfo(data) {
        if (data.classes && data.classes.length > 0) {
            debugClasses.textContent = data.classes.join(', ');
        } else {
            debugClasses.textContent = 'ÏóÜÏùå';
        }
        
        debugBoxes.textContent = data.boxes ? data.boxes.length : '0';
    }
    
    // ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò Îç∞Ïù¥ÌÑ∞ Í∏∞Î∞ò ÏïàÎÇ¥ Î©îÏãúÏßÄ ÏóÖÎç∞Ïù¥Ìä∏
    function updateInstructionByNavigationData(data) {
        if (!data.navigation) {
            updateInstruction('Îç∞Ïù¥ÌÑ∞Î•º Ï≤òÎ¶¨ÌïòÎäî Ï§ëÏûÖÎãàÎã§', 'neutral');
            return;
        }
        
        const nav = data.navigation;
        
        // Ïö∞ÏÑ†ÏàúÏúÑ 1: Í≤ΩÍ≥† ÏÇ¨Ìï≠
        if (nav.warnings && nav.warnings.length > 0) {
            const primaryWarning = nav.warnings[0];
            updateInstruction(primaryWarning, 'warning');
            return;
        }
        
        // Ïö∞ÏÑ†ÏàúÏúÑ 2: Î∞©Ìñ• ÏïàÎÇ¥
        if (nav.state === 'intersection') {
            if (nav.direction === 'stop') {
                updateInstruction('ÍµêÏ∞®Î°úÏóêÏÑú Î©àÏ∂§ Ïã†Ìò∏ÏûÖÎãàÎã§', 'danger');
            } else {
                updateInstruction('ÍµêÏ∞®Î°úÍ∞Ä Í∞êÏßÄÎêòÏóàÏäµÎãàÎã§', 'warning');
            }
        } else if (nav.state === 'straight') {
            if (nav.obstacles.length > 0) {
                updateInstruction('ÏßÅÏßÑ Í∞ÄÎä•ÌïòÏßÄÎßå Ïû•Ïï†Î¨º Ï£ºÏùò', 'warning');
            } else {
                updateInstruction('ÏßÅÏßÑÌïòÏÑ∏Ïöî', 'success');
            }
        } else {
            updateInstruction('Í≤ΩÎ°úÎ•º ÌôïÏù∏ÌïòÎäî Ï§ëÏûÖÎãàÎã§', 'neutral');
        }
    }
    let before = ''
    // ÏïàÎÇ¥ Î©îÏãúÏßÄ ÏóÖÎç∞Ïù¥Ìä∏
    function updateInstruction(message, type) {
        instructionText.textContent = message;
        instructionBox.className = `instruction ${type}`;
        if (before != message) {speak(message)}
        before = message
        // Ï§ëÏöîÌïú Î©îÏãúÏßÄÎäî ÏßÑÎèôÏúºÎ°ú ÏïåÎ¶º (Î™®Î∞îÏùº ÏßÄÏõê)
        if (type === 'danger' || type === 'warning') {
            if (navigator.vibrate) {
                navigator.vibrate([200, 100, 200]);
            }
        }
        
        console.log(`ÏïàÎÇ¥ Î©îÏãúÏßÄ ÏóÖÎç∞Ïù¥Ìä∏: ${message} (${type})`);
    }
    
    // ÏÉÅÌÉú ÌÖçÏä§Ìä∏ Î≥ÄÌôò
    function getStateText(state) {
        switch(state) {
            case 'intersection': return 'ÍµêÏ∞®Î°ú';
            case 'straight': return 'ÏßÅÏßÑ';
            case 'unknown': return 'Ïïå Ïàò ÏóÜÏùå';
            default: return state;
        }
    }
    
    // ÏÉÅÌÉú ÏÉâÏÉÅ Î≥ÄÌôò
    function getStateColor(state) {
        switch(state) {
            case 'intersection': return '#ff9800';
            case 'straight': return '#4caf50';
            case 'unknown': return '#666';
            default: return '#666';
        }
    }
    
    // Î∞©Ìñ• ÌÖçÏä§Ìä∏ Î≥ÄÌôò
    function getDirectionText(direction) {
        switch(direction) {
            case 'forward': return 'ÏïûÏúºÎ°ú';
            case 'stop': return 'Î©àÏ∂§';
            case 'left': return 'Ï¢åÌöåÏ†Ñ';
            case 'right': return 'Ïö∞ÌöåÏ†Ñ';
            case 'none': return 'ÏóÜÏùå';
            default: return direction;
        }
    }
    
    // Î∞©Ìñ• ÏÉâÏÉÅ Î≥ÄÌôò
    function getDirectionColor(direction) {
        switch(direction) {
            case 'forward': return '#4caf50';
            case 'stop': return '#f44336';
            case 'left': case 'right': return '#ff9800';
            case 'none': return '#666';
            default: return '#666';
        }
    }
    
    // Ïπ¥Î©îÎùº ÏãúÏûë Ìï®Ïàò
    async function startCamera() {
        try {
            const constraints = {
                video: {
                    width: { ideal: 640 },
                    height: { ideal: 480 },
                    facingMode: 'environment' // ÌõÑÎ©¥ Ïπ¥Î©îÎùº Ïö∞ÏÑ†
                }
            };
            
            const stream = await navigator.mediaDevices.getUserMedia(constraints);
            video.srcObject = stream;
            
            video.onloadedmetadata = () => {
                console.log('ÎπÑÎîîÏò§ Î©îÌÉÄÎç∞Ïù¥ÌÑ∞ Î°úÎìúÎê®:', video.videoWidth, 'x', video.videoHeight);
                video.play().then(() => {
                    isStreaming = true;
                    startButton.textContent = 'Ïπ¥Î©îÎùº Ï§ëÏßÄ';
                    statusText.textContent = 'Ïπ¥Î©îÎùºÍ∞Ä ÌôúÏÑ±ÌôîÎêòÏóàÏäµÎãàÎã§.';
                    statusText.style.color = 'green';
                    debugStatus.textContent = 'Ïä§Ìä∏Î¶¨Î∞ç Ï§ë';
                    
                    // ÎπÑÎîîÏò§ Ïû¨ÏÉù ÏãúÏûë ÌõÑ ÏïΩÍ∞ÑÏùò ÏßÄÏó∞ÏùÑ ÎëêÍ≥† Ïò§Î≤ÑÎ†àÏù¥ ÏÉùÏÑ±
                    setTimeout(() => {
                        createOverlayCanvas();
                        startRendering();
                        startCapture();
                    }, 500);
                }).catch(err => {
                    console.error('ÎπÑÎîîÏò§ Ïû¨ÏÉù Ïò§Î•ò:', err);
                });
            };
            
            // ÎπÑÎîîÏò§ ÌÅ¨Í∏∞ Î≥ÄÍ≤Ω Î∞è Î°úÎìú Ïù¥Î≤§Ìä∏ Ï∂îÍ∞Ä
            video.addEventListener('loadeddata', () => {
                console.log('ÎπÑÎîîÏò§ Îç∞Ïù¥ÌÑ∞ Î°úÎìúÎê®');
                setTimeout(resizeOverlayCanvas, 100);
            });
            video.addEventListener('resize', resizeOverlayCanvas);
            window.addEventListener('resize', resizeOverlayCanvas);
            
        } catch (err) {
            console.error('Ïπ¥Î©îÎùº Ï†ëÍ∑º Ïò§Î•ò:', err);
            statusText.textContent = 'Ïπ¥Î©îÎùºÏóê Ï†ëÍ∑ºÌï† Ïàò ÏóÜÏäµÎãàÎã§.';
            statusText.style.color = 'red';
            debugStatus.textContent = 'Ïπ¥Î©îÎùº Ïò§Î•ò';
            updateInstruction('Ïπ¥Î©îÎùºÏóê Ï†ëÍ∑ºÌï† Ïàò ÏóÜÏäµÎãàÎã§', 'danger');
        }
    }
    
    // Ïπ¥Î©îÎùº Ï§ëÏßÄ Ìï®Ïàò
    function stopCamera() {
        if (video.srcObject) {
            video.srcObject.getTracks().forEach(track => track.stop());
            video.srcObject = null;
        }
        
        if (captureTimer) {
            clearInterval(captureTimer);
            captureTimer = null;
        }
        
        // Î†åÎçîÎßÅ Ï§ëÏßÄ Î∞è Ïò§Î≤ÑÎ†àÏù¥ Ï†úÍ±∞
        stopRendering();
        if (overlayCanvas) {
            overlayCanvas.remove();
            overlayCanvas = null;
            overlayContext = null;
        }
        
        // Îç∞Ïù¥ÌÑ∞ Ï¥àÍ∏∞Ìôî
        currentBoxes = [];
        currentBoxData = [];
        currentNavigation = null;
        currentArrows = null;
        
        isStreaming = false;
        startButton.textContent = 'Ïπ¥Î©îÎùº ÏãúÏûë';
        statusText.textContent = 'Ïπ¥Î©îÎùºÍ∞Ä Ï§ëÏßÄÎêòÏóàÏäµÎãàÎã§.';
        statusText.style.color = 'orange';
        debugStatus.textContent = 'Ï§ëÏßÄÎê®';
        updateInstruction('Ïπ¥Î©îÎùºÎ•º ÏãúÏûëÌïòÏÑ∏Ïöî', 'neutral');
    }
    
    // ÌîÑÎ†àÏûÑ Ï∫°Ï≤ò ÏãúÏûë
    function startCapture() {
        if (captureTimer) {
            clearInterval(captureTimer);
        }
        
        captureTimer = setInterval(() => {
            if (isStreaming && socket && !pendingRequest) {
                captureFrame();
            }
        }, 500); // 0.5Ï¥àÎßàÎã§ ÌîÑÎ†àÏûÑ Ï∫°Ï≤ò
    }
    
    // ÌîÑÎ†àÏûÑ Ï∫°Ï≤ò Î∞è Ï†ÑÏÜ°
    function captureFrame() {
        if (!socket || pendingRequest) return;
        
        const canvas = document.createElement('canvas');
        const context = canvas.getContext('2d');
        
        canvas.width = video.videoWidth;
        canvas.height = video.videoHeight;
        
        context.drawImage(video, 0, 0);
        
        const imageData = canvas.toDataURL('image/jpeg', 0.8);
        
        pendingRequest = true;
        lastRequestTime = Date.now();
        debugStatus.textContent = 'Ï≤òÎ¶¨ Ï§ë...';
        
        socket.emit('image', imageData);
    }
    
    // Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà
    startButton.addEventListener('click', () => {
        if (isStreaming) {
            stopCamera();
        } else {
            startCamera();
        }
    });
    
    // ÌùëÎ∞± Î™®Îìú ÌÜ†Í∏Ä
    grayscaleToggle.addEventListener('click', () => {
        grayscaleMode = !grayscaleMode;
        updateGrayscaleMode(grayscaleMode);
        
        if (socket) {
            socket.emit('toggle_grayscale', grayscaleMode);
        }
    });
    
    // Ï¥àÍ∏∞Ìôî
    setupSocket();
    updateInstruction('Ïπ¥Î©îÎùºÎ•º ÏãúÏûëÌïòÏÑ∏Ïöî', 'neutral');
    
    // ÌéòÏù¥ÏßÄ Ï¢ÖÎ£å Ïãú Ï†ïÎ¶¨
    window.addEventListener('beforeunload', () => {
        if (isStreaming) {
            stopCamera();
        }
        if (socket) {
            socket.disconnect();
        }
    });
    
    // ÌôîÎ©¥ Î∞©Ìñ• Î≥ÄÍ≤Ω Ïãú Ï∫îÎ≤ÑÏä§ ÌÅ¨Í∏∞ Ï°∞Ï†ï
    window.addEventListener('orientationchange', () => {
        setTimeout(resizeOverlayCanvas, 100);
    });
});
